import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import { APIRequest } from "../api";
import { resetAggState } from "./aggregateSlice";
import { resetStatuses } from "./cohortSlice";
import { resetReportStatus } from "./reportSlice";
import { resetReportsStatus } from "./reportsSlice";
import { resetTableStatus } from "./tableSlice";

export interface AuthState {
  user?: AuthUserType;
  dataset?: AuthDatasetType;
  datasets?: AuthDatasetType[];
  chironVersion?: string;
  authStatus: "idle" | "loading" | "failed" | "done";
  userSessionTimeout?: Date;
  errors: string[];
}

export type AuthUserType = {
  id: number;
  username: string;
  isStaff: boolean;
  name: string;
  email: string;
  accessLevel: "phi" | "deid" | "agg";
};

export type AuthDatasetType = {
  id: number;
  name: string;
  description: string;
  siteTitle: string;
  unique_id: string;
  selectable: boolean;
  contactEmail?: string;
  lastImport?: string;
  subjectCount?: string;
  accessLevel?: string;
  accessLevelLabel?: string;
  canViewWorkspace?: boolean;
  canViewSubjectDetails?: boolean;
  logoUrl?: string;
  chironUserId: number;
  extraHeaderLinks?: object;
};

const initialState: AuthState = {
  user: undefined,
  dataset: undefined,
  chironVersion: undefined,
  datasets: undefined,
  authStatus: "idle",
  userSessionTimeout: undefined,
  errors: [],
};

export const setCurrentDataset = createAsyncThunk(
  "user/setCurrentDataset",
  async (properties: { dataset: string }) => {
    const response = await APIRequest(
      "GET",
      `/api/v2/dataset/${properties.dataset}/`
    );

    const results = {
      dataset: response,
    };
    return results;
  }
);

export const getDatasets = createAsyncThunk("user/getDatasets", async () => {
  const response = await APIRequest("GET", `/api/v2/dataset/`);
  return response;
});

export const setCurrentUser = createAsyncThunk(
  "user/setCurrentUser",
  async (
    properties: {
      dataset_id: string | undefined;
      current_dataset: AuthDatasetType | undefined;
    },
    thunkApi
  ) => {
    const response = await APIRequest("GET", "/api/v2/auth/");
    let dataset = properties.current_dataset;
    const datasets = await APIRequest("GET", `/api/v2/dataset/`);

    if (
      properties.dataset_id != undefined &&
      properties.dataset_id != dataset?.unique_id
    ) {
      dataset = await APIRequest(
        "GET",
        `/api/v2/dataset/${properties.dataset_id}/`
      );
      thunkApi.dispatch(resetDatasetStates());
    }
    const results = {
      ...response,
      dataset: dataset,
      datasets: datasets.datasets,
      userSessionTimeout: new Date().getTime() + 30 * 60 * 1000,
    };
    return results;
  }
);

export const resetDatasetStates = createAsyncThunk(
  "user/resetDatasetStates",
  async (_, thunkApi) => {
    thunkApi.dispatch(resetAggState());
    thunkApi.dispatch(resetReportStatus());
    thunkApi.dispatch(resetTableStatus());
    thunkApi.dispatch(resetReportsStatus());
    thunkApi.dispatch(resetStatuses());
  }
);

export const authSlice = createSlice({
  name: "auth",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    // setCurrentDataset
    [
      setCurrentUser,
      resetDatasetStates,
      setCurrentDataset,
      getDatasets,
    ].forEach((thunk) => {
      builder
        .addCase(thunk.pending, (state) => {
          state.authStatus = "loading";
        })
        .addCase(thunk.fulfilled, (state, action) => {
          return { ...state, ...action.payload, authStatus: "done" };
        })
        .addCase(thunk.rejected, (state, action) => {
          state.authStatus = "failed";
          state.errors =
            action.error && action.error.message
              ? [action.error.message]
              : ["Report failed to load"];
          state.user = undefined;
          state.dataset = undefined;
          state.datasets = undefined;
          state.chironVersion = undefined;
        });
    });
  },
});

export default authSlice.reducer;
