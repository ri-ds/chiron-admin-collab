"""
Django settings for demo project.

Generated by 'django-admin startproject' using Django 4.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("SECRET_KEY", "django-insecure-kr+&pmp4ol)&3pt(&*+bpwynpp&7gli_mfz4@+8e_%h#uc9n@w")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = [
    "chiron-ui.research.cchmc.org",
    "localhost",
    "127.0.0.1",
    "0.0.0.0"
]

# CSRF_TRUSTED_ORIGINS = [os.getenv("CROSS_ORIGIN_URL", "http://localhost:3000")]

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.humanize",
    "crispy_forms",
    "rest_framework",
    "chiron",
    "corsheaders",
    "demo",
    'oauth2_provider',
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",    
    "django.contrib.sessions.middleware.SessionMiddleware",    
    "django.middleware.common.CommonMiddleware",    
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    "django.contrib.auth.middleware.AuthenticationMiddleware",    
    "django.contrib.messages.middleware.MessageMiddleware",    
    "django.middleware.clickjacking.XFrameOptionsMiddleware"]
#     "corsheaders.middleware.CorsMiddleware",
#     "django.middleware.common.CommonMiddleware","django.middleware.security.SecurityMiddleware",
#     "django.contrib.sessions.middleware.SessionMiddleware",
#     "django.middleware.common.CommonMiddleware",
#     "django.middleware.csrf.CsrfViewMiddleware",
#     "django.contrib.auth.middleware.AuthenticationMiddleware",
#     "django.contrib.messages.middleware.MessageMiddleware",
#     "django.middleware.clickjacking.XFrameOptionsMiddleware",
#     # "demo.middleware.CCHMCHeaderMiddleware",

# ]

ROOT_URLCONF = "demo.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "demo.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.getenv("DB_NAME", "chiron_demo"),
        "USER": os.getenv("DB_USER", "postgres"),
        "PASSWORD": os.getenv("DB_PASSWORD", "postgres"),
        "HOST": os.getenv("DB_HOST", "db"),
        "PORT": "5432",
    }
}

# DATABASES = {
#     "default": {
#         "ENGINE": "django.db.backends.postgresql",
#         "NAME": "chiron_demo",
#         "USER": "postgres",
#         "PASSWORD": "chiron_trang", 
#         "HOST": "localhost",
#         "PORT": "5432",
#         # (optional) uncomment and modify the OPTIONS line below
#         # to change the Django schema to something besides "public"
#         "OPTIONS": {#"options": "-c search_path=django",
#                                 'gssencmode': 'disable'},
#     }
# }



# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "US/Eastern"

USE_I18N = False

USE_TZ = False


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "static/"
STATIC_ROOT = "/var/log/static"

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

TEMPLATES[0]["OPTIONS"]["context_processors"].append("chiron.context_processors.chiron_globals")
CHIRON_DATABASE = "postgres"


CHIRON_SQL_ALCHEMY_CONNECTION_STRING = os.getenv(
    "SQL_ALCHEMY_URI",
    f"postgresql://{os.getenv('DB_USER', 'postgres')}:{os.getenv('DB_PASSWORD', 'postgres')}@{os.getenv('DB_HOST', 'db')}:5432/{os.getenv('DB_NAME', 'chiron_demo')}",  # noqa
)

# AUTHENTICATION_BACKENDS = ["demo.backends.ChironRemoteUserBackend"]
AUTHENTICATION_BACKENDS = [
    "django.contrib.auth.backends.ModelBackend",
    "demo.backends.ChironRemoteUserBackend",  # if you have this
]
AUTO_MANAGE_GROUPS = False

PATIENT_COUNT = 40000
LARGE_COLLECTION_COUNT = 500000
SMALL_COLLECTION_COUNT = 25000

CHIRON_SHOW_ANALYSIS_VIEW = True

CHIRON_PROCESSOR_MODULES = [
    "chiron.processors",
    "chiron_config.processors",
]

CHIRON_SOURCE_DATA_DIRECTORY = str(BASE_DIR / "chiron_config/") + "/"


# CORS_ALLOWED_ORIGINS = [
#     "http://localhost:8000",
#     "http://127.0.0.1:8000",
#     "http://localhost:3000",
#     "http://ui:3000",  # service name if needed
# ]

CORS_ALLOWED_ORIGIN_REGEXES = [
    r"http://localhost*$",
]

CORS_URLS_REGEX = r"^/localhost.*$"

CORS_ALLOW_METHODS = (
    "DELETE",
    "GET",
    "OPTIONS",
    "PATCH",
    "POST",
    "PUT",
)

CHIRON_TREAT_ONTOLOGY_CONCEPTS_AS_TEXT = True

# CSRF_TRUSTED_ORIGINS = ['http://localhost:13001', 'http://127.0.0.1:13001']
# SESSION_COOKIE_SAMESITE = None
# SESSION_COOKIE_SECURE = False
# CSRF_COOKIE_SECURE = False



SESSION_COOKIE_SAMESITE = "Lax"  # or "None" if using HTTPS and cross-site
SESSION_COOKIE_SECURE = False    # True if using HTTPS in production

CSRF_TRUSTED_ORIGINS = ['http://localhost']
CORS_ALLOWED_ORIGINS = [
    "http://localhost",
]
