{
    "dataset": {
        "id": 11,
        "unique_id": "dataset2_stored",
        "display_name": "dataset2_stored",
        "database_name": "dataset2_stored",
        "description": "",
        "root_collection_id": 32,
        "subject_id_fields_to_index": "id",
        "autocreate_chiron_user": false,
        "auto_access_level": "deid",
        "auto_can_view_workspace": true,
        "auto_can_view_subject_details": true,
        "override_site_title": null,
        "override_footer_template": "",
        "override_data_summary_function_path": "",
        "override_infobar": "",
        "override_infobar_type": null
    },
    "permission_groups": [],
    "default_permission_groups": [],
    "collections": [
        {
            "id": 33,
            "dataset_id": 11,
            "permanent_id": "d2_encounters",
            "name": "d2_encounters",
            "name_plural": null,
            "many_to_many_with_subject": false,
            "collection_id_is_integer": false,
            "event_id_field_id": 482,
            "event_name_field_id": null,
            "event_date_field_id": null,
            "event_end_date_field_id": null
        },
        {
            "id": 32,
            "dataset_id": 11,
            "permanent_id": "d2_patients",
            "name": "d2_patients",
            "name_plural": null,
            "many_to_many_with_subject": false,
            "collection_id_is_integer": false,
            "event_id_field_id": 454,
            "event_name_field_id": null,
            "event_date_field_id": null,
            "event_end_date_field_id": null
        }
    ],
    "collection_relationships": [],
    "sources": [
        {
            "id": 35,
            "name": "d2_patients",
            "collection_id": 32,
            "processor_id": 45,
            "execution_order": 1,
            "exclude_from_etl": false
        },
        {
            "id": 36,
            "name": "d2_encounters",
            "collection_id": 33,
            "processor_id": 45,
            "execution_order": 2,
            "exclude_from_etl": false
        },
        {
            "id": 66,
            "name": "chiron_subject",
            "collection_id": 32,
            "processor_id": 233,
            "execution_order": 200,
            "exclude_from_etl": false
        },
        {
            "id": 67,
            "name": "chiron_encounters",
            "collection_id": 33,
            "processor_id": 234,
            "execution_order": 201,
            "exclude_from_etl": false
        }
    ],
    "categories": [
        {
            "id": 47,
            "dataset_id": 11,
            "parent_id": null,
            "unique_id": "d2_encounters",
            "name": "d2_encounters",
            "order": 100.0
        },
        {
            "id": 46,
            "dataset_id": 11,
            "parent_id": null,
            "unique_id": "d2_patients",
            "name": "d2_patients",
            "order": 100.0
        }
    ],
    "concepts": [
        {
            "id": 493,
            "permanent_id": "BASE_ENCOUNTER_COST_tulvsopbpm",
            "name": "BASE_ENCOUNTER_COST",
            "name_plural": null,
            "description": null,
            "source_id": 36,
            "concept_handler_id": 41,
            "collection_id": 33,
            "category_id": 47,
            "order": 12.0,
            "multivalue": true,
            "published": true,
            "include_in_cohort_def": true,
            "include_in_table_def": true,
            "include_in_analysis_def": true,
            "has_phi": false,
            "exclude_from_aggregated": false,
            "concept_for_prefilter_id": null,
            "prefilter_mode": "required"
        },
        {
            "id": 491,
            "permanent_id": "CODE_lmnmdlqeal",
            "name": "CODE",
            "name_plural": null,
            "description": null,
            "source_id": 36,
            "concept_handler_id": 41,
            "collection_id": 33,
            "category_id": 47,
            "order": 10.0,
            "multivalue": true,
            "published": true,
            "include_in_cohort_def": true,
            "include_in_table_def": true,
            "include_in_analysis_def": true,
            "has_phi": false,
            "exclude_from_aggregated": false,
            "concept_for_prefilter_id": null,
            "prefilter_mode": "required"
        },
        {
            "id": 492,
            "permanent_id": "DESCRIPTION_xjlrropoun",
            "name": "DESCRIPTION",
            "name_plural": null,
            "description": null,
            "source_id": 36,
            "concept_handler_id": 41,
            "collection_id": 33,
            "category_id": 47,
            "order": 11.0,
            "multivalue": true,
            "published": true,
            "include_in_cohort_def": true,
            "include_in_table_def": true,
            "include_in_analysis_def": true,
            "has_phi": false,
            "exclude_from_aggregated": false,
            "concept_for_prefilter_id": null,
            "prefilter_mode": "required"
        },
        {
            "id": 490,
            "permanent_id": "ENCOUNTERCLASS_kqvtiptsrn",
            "name": "ENCOUNTERCLASS",
            "name_plural": null,
            "description": null,
            "source_id": 36,
            "concept_handler_id": 41,
            "collection_id": 33,
            "category_id": 47,
            "order": 9.0,
            "multivalue": true,
            "published": true,
            "include_in_cohort_def": true,
            "include_in_table_def": true,
            "include_in_analysis_def": true,
            "has_phi": false,
            "exclude_from_aggregated": false,
            "concept_for_prefilter_id": null,
            "prefilter_mode": "required"
        },
        {
            "id": 754,
            "permanent_id": "Id_plvufflgxj",
            "name": "encounter ID",
            "name_plural": null,
            "description": "",
            "source_id": 36,
            "concept_handler_id": 41,
            "collection_id": 33,
            "category_id": 47,
            "order": 1.0,
            "multivalue": true,
            "published": true,
            "include_in_cohort_def": true,
            "include_in_table_def": true,
            "include_in_analysis_def": true,
            "has_phi": false,
            "exclude_from_aggregated": false,
            "concept_for_prefilter_id": null,
            "prefilter_mode": "required"
        },
        {
            "id": 487,
            "permanent_id": "ORGANIZATION_ojtmeutqvq",
            "name": "ORGANIZATION",
            "name_plural": null,
            "description": null,
            "source_id": 36,
            "concept_handler_id": 41,
            "collection_id": 33,
            "category_id": 47,
            "order": 6.0,
            "multivalue": true,
            "published": true,
            "include_in_cohort_def": true,
            "include_in_table_def": true,
            "include_in_analysis_def": true,
            "has_phi": false,
            "exclude_from_aggregated": false,
            "concept_for_prefilter_id": null,
            "prefilter_mode": "required"
        },
        {
            "id": 486,
            "permanent_id": "PASSPORT_tuhmsqtaud",
            "name": "PASSPORT",
            "name_plural": null,
            "description": null,
            "source_id": 36,
            "concept_handler_id": 41,
            "collection_id": 33,
            "category_id": 47,
            "order": 5.0,
            "multivalue": true,
            "published": true,
            "include_in_cohort_def": true,
            "include_in_table_def": true,
            "include_in_analysis_def": true,
            "has_phi": false,
            "exclude_from_aggregated": false,
            "concept_for_prefilter_id": null,
            "prefilter_mode": "required"
        },
        {
            "id": 485,
            "permanent_id": "PATIENT_qyxtzoxyzq",
            "name": "PATIENT",
            "name_plural": null,
            "description": null,
            "source_id": 36,
            "concept_handler_id": 41,
            "collection_id": 33,
            "category_id": 47,
            "order": 4.0,
            "multivalue": true,
            "published": true,
            "include_in_cohort_def": true,
            "include_in_table_def": true,
            "include_in_analysis_def": true,
            "has_phi": false,
            "exclude_from_aggregated": false,
            "concept_for_prefilter_id": null,
            "prefilter_mode": "required"
        },
        {
            "id": 495,
            "permanent_id": "PAYER_COVERAGE_ojszwvogpr",
            "name": "PAYER_COVERAGE",
            "name_plural": null,
            "description": null,
            "source_id": 36,
            "concept_handler_id": 41,
            "collection_id": 33,
            "category_id": 47,
            "order": 14.0,
            "multivalue": true,
            "published": true,
            "include_in_cohort_def": true,
            "include_in_table_def": true,
            "include_in_analysis_def": true,
            "has_phi": false,
            "exclude_from_aggregated": false,
            "concept_for_prefilter_id": null,
            "prefilter_mode": "required"
        },
        {
            "id": 489,
            "permanent_id": "PAYER_yqkvgmgrgj",
            "name": "PAYER",
            "name_plural": null,
            "description": null,
            "source_id": 36,
            "concept_handler_id": 41,
            "collection_id": 33,
            "category_id": 47,
            "order": 8.0,
            "multivalue": true,
            "published": true,
            "include_in_cohort_def": true,
            "include_in_table_def": true,
            "include_in_analysis_def": true,
            "has_phi": false,
            "exclude_from_aggregated": false,
            "concept_for_prefilter_id": null,
            "prefilter_mode": "required"
        },
        {
            "id": 488,
            "permanent_id": "PROVIDER_tiekafhnpw",
            "name": "PROVIDER",
            "name_plural": null,
            "description": null,
            "source_id": 36,
            "concept_handler_id": 41,
            "collection_id": 33,
            "category_id": 47,
            "order": 7.0,
            "multivalue": true,
            "published": true,
            "include_in_cohort_def": true,
            "include_in_table_def": true,
            "include_in_analysis_def": true,
            "has_phi": false,
            "exclude_from_aggregated": false,
            "concept_for_prefilter_id": null,
            "prefilter_mode": "required"
        },
        {
            "id": 496,
            "permanent_id": "REASONCODE_hndcwjansp",
            "name": "REASONCODE",
            "name_plural": null,
            "description": null,
            "source_id": 36,
            "concept_handler_id": 41,
            "collection_id": 33,
            "category_id": 47,
            "order": 15.0,
            "multivalue": true,
            "published": true,
            "include_in_cohort_def": true,
            "include_in_table_def": true,
            "include_in_analysis_def": true,
            "has_phi": false,
            "exclude_from_aggregated": false,
            "concept_for_prefilter_id": null,
            "prefilter_mode": "required"
        },
        {
            "id": 497,
            "permanent_id": "REASONDESCRIPTION_pggsyaxfqy",
            "name": "REASONDESCRIPTION",
            "name_plural": null,
            "description": null,
            "source_id": 36,
            "concept_handler_id": 41,
            "collection_id": 33,
            "category_id": 47,
            "order": 16.0,
            "multivalue": true,
            "published": true,
            "include_in_cohort_def": true,
            "include_in_table_def": true,
            "include_in_analysis_def": true,
            "has_phi": false,
            "exclude_from_aggregated": false,
            "concept_for_prefilter_id": null,
            "prefilter_mode": "required"
        },
        {
            "id": 483,
            "permanent_id": "START_wptpwtchpc",
            "name": "START",
            "name_plural": null,
            "description": null,
            "source_id": 36,
            "concept_handler_id": 43,
            "collection_id": 33,
            "category_id": 47,
            "order": 2.0,
            "multivalue": true,
            "published": true,
            "include_in_cohort_def": true,
            "include_in_table_def": true,
            "include_in_analysis_def": true,
            "has_phi": false,
            "exclude_from_aggregated": false,
            "concept_for_prefilter_id": null,
            "prefilter_mode": "required"
        },
        {
            "id": 484,
            "permanent_id": "STOP_eiwzqemmkp",
            "name": "STOP",
            "name_plural": null,
            "description": null,
            "source_id": 36,
            "concept_handler_id": 43,
            "collection_id": 33,
            "category_id": 47,
            "order": 3.0,
            "multivalue": true,
            "published": true,
            "include_in_cohort_def": true,
            "include_in_table_def": true,
            "include_in_analysis_def": true,
            "has_phi": false,
            "exclude_from_aggregated": false,
            "concept_for_prefilter_id": null,
            "prefilter_mode": "required"
        },
        {
            "id": 494,
            "permanent_id": "TOTAL_CLAIM_COST_jixcudwgmw",
            "name": "TOTAL_CLAIM_COST",
            "name_plural": null,
            "description": null,
            "source_id": 36,
            "concept_handler_id": 41,
            "collection_id": 33,
            "category_id": 47,
            "order": 13.0,
            "multivalue": true,
            "published": true,
            "include_in_cohort_def": true,
            "include_in_table_def": true,
            "include_in_analysis_def": true,
            "has_phi": false,
            "exclude_from_aggregated": false,
            "concept_for_prefilter_id": null,
            "prefilter_mode": "required"
        },
        {
            "id": 482,
            "permanent_id": "autocreated_encounter_id",
            "name": "autocreated encounter ID",
            "name_plural": null,
            "description": "",
            "source_id": 67,
            "concept_handler_id": 47,
            "collection_id": 33,
            "category_id": 47,
            "order": 1.1,
            "multivalue": true,
            "published": true,
            "include_in_cohort_def": true,
            "include_in_table_def": true,
            "include_in_analysis_def": true,
            "has_phi": false,
            "exclude_from_aggregated": false,
            "concept_for_prefilter_id": null,
            "prefilter_mode": "required"
        },
        {
            "id": 756,
            "permanent_id": "d2_age_at_start",
            "name": "age at encounter",
            "name_plural": null,
            "description": "",
            "source_id": 67,
            "concept_handler_id": 48,
            "collection_id": 33,
            "category_id": 47,
            "order": 3.1,
            "multivalue": true,
            "published": true,
            "include_in_cohort_def": true,
            "include_in_table_def": true,
            "include_in_analysis_def": true,
            "has_phi": false,
            "exclude_from_aggregated": false,
            "concept_for_prefilter_id": null,
            "prefilter_mode": "required"
        },
        {
            "id": 470,
            "permanent_id": "ADDRESS_cicdjinewc",
            "name": "ADDRESS",
            "name_plural": null,
            "description": null,
            "source_id": 35,
            "concept_handler_id": 41,
            "collection_id": 32,
            "category_id": 46,
            "order": 17.0,
            "multivalue": true,
            "published": true,
            "include_in_cohort_def": true,
            "include_in_table_def": true,
            "include_in_analysis_def": true,
            "has_phi": false,
            "exclude_from_aggregated": false,
            "concept_for_prefilter_id": null,
            "prefilter_mode": "required"
        },
        {
            "id": 455,
            "permanent_id": "BIRTHDATE_dvsqsuccxv",
            "name": "BIRTHDATE",
            "name_plural": null,
            "description": null,
            "source_id": 35,
            "concept_handler_id": 41,
            "collection_id": 32,
            "category_id": 46,
            "order": 2.0,
            "multivalue": true,
            "published": true,
            "include_in_cohort_def": true,
            "include_in_table_def": true,
            "include_in_analysis_def": true,
            "has_phi": false,
            "exclude_from_aggregated": false,
            "concept_for_prefilter_id": null,
            "prefilter_mode": "required"
        },
        {
            "id": 469,
            "permanent_id": "BIRTHPLACE_rzaqwitydc",
            "name": "BIRTHPLACE",
            "name_plural": null,
            "description": null,
            "source_id": 35,
            "concept_handler_id": 41,
            "collection_id": 32,
            "category_id": 46,
            "order": 16.0,
            "multivalue": true,
            "published": true,
            "include_in_cohort_def": true,
            "include_in_table_def": true,
            "include_in_analysis_def": true,
            "has_phi": false,
            "exclude_from_aggregated": false,
            "concept_for_prefilter_id": null,
            "prefilter_mode": "required"
        },
        {
            "id": 471,
            "permanent_id": "CITY_hkszmirmae",
            "name": "CITY",
            "name_plural": null,
            "description": null,
            "source_id": 35,
            "concept_handler_id": 41,
            "collection_id": 32,
            "category_id": 46,
            "order": 18.0,
            "multivalue": true,
            "published": true,
            "include_in_cohort_def": true,
            "include_in_table_def": true,
            "include_in_analysis_def": true,
            "has_phi": false,
            "exclude_from_aggregated": false,
            "concept_for_prefilter_id": null,
            "prefilter_mode": "required"
        },
        {
            "id": 473,
            "permanent_id": "COUNTY_vvrbiqojgj",
            "name": "COUNTY",
            "name_plural": null,
            "description": null,
            "source_id": 35,
            "concept_handler_id": 41,
            "collection_id": 32,
            "category_id": 46,
            "order": 20.0,
            "multivalue": true,
            "published": true,
            "include_in_cohort_def": true,
            "include_in_table_def": true,
            "include_in_analysis_def": true,
            "has_phi": false,
            "exclude_from_aggregated": false,
            "concept_for_prefilter_id": null,
            "prefilter_mode": "required"
        },
        {
            "id": 456,
            "permanent_id": "DEATHDATE_pwedudwsts",
            "name": "DEATHDATE",
            "name_plural": null,
            "description": null,
            "source_id": 35,
            "concept_handler_id": 41,
            "collection_id": 32,
            "category_id": 46,
            "order": 3.0,
            "multivalue": true,
            "published": true,
            "include_in_cohort_def": true,
            "include_in_table_def": true,
            "include_in_analysis_def": true,
            "has_phi": false,
            "exclude_from_aggregated": false,
            "concept_for_prefilter_id": null,
            "prefilter_mode": "required"
        },
        {
            "id": 458,
            "permanent_id": "DRIVERS_aeyrznjumm",
            "name": "DRIVERS",
            "name_plural": null,
            "description": null,
            "source_id": 35,
            "concept_handler_id": 41,
            "collection_id": 32,
            "category_id": 46,
            "order": 5.0,
            "multivalue": true,
            "published": true,
            "include_in_cohort_def": true,
            "include_in_table_def": true,
            "include_in_analysis_def": true,
            "has_phi": false,
            "exclude_from_aggregated": false,
            "concept_for_prefilter_id": null,
            "prefilter_mode": "required"
        },
        {
            "id": 467,
            "permanent_id": "ETHNICITY_zbuuivfxab",
            "name": "ETHNICITY",
            "name_plural": null,
            "description": null,
            "source_id": 35,
            "concept_handler_id": 41,
            "collection_id": 32,
            "category_id": 46,
            "order": 14.0,
            "multivalue": true,
            "published": true,
            "include_in_cohort_def": true,
            "include_in_table_def": true,
            "include_in_analysis_def": true,
            "has_phi": false,
            "exclude_from_aggregated": false,
            "concept_for_prefilter_id": null,
            "prefilter_mode": "required"
        },
        {
            "id": 461,
            "permanent_id": "FIRST_bcixakdiiw",
            "name": "FIRST",
            "name_plural": null,
            "description": null,
            "source_id": 35,
            "concept_handler_id": 41,
            "collection_id": 32,
            "category_id": 46,
            "order": 8.0,
            "multivalue": true,
            "published": true,
            "include_in_cohort_def": true,
            "include_in_table_def": true,
            "include_in_analysis_def": true,
            "has_phi": false,
            "exclude_from_aggregated": false,
            "concept_for_prefilter_id": null,
            "prefilter_mode": "required"
        },
        {
            "id": 468,
            "permanent_id": "GENDER_bbfdtarwhl",
            "name": "GENDER",
            "name_plural": null,
            "description": null,
            "source_id": 35,
            "concept_handler_id": 41,
            "collection_id": 32,
            "category_id": 46,
            "order": 15.0,
            "multivalue": true,
            "published": true,
            "include_in_cohort_def": true,
            "include_in_table_def": true,
            "include_in_analysis_def": true,
            "has_phi": false,
            "exclude_from_aggregated": false,
            "concept_for_prefilter_id": null,
            "prefilter_mode": "required"
        },
        {
            "id": 478,
            "permanent_id": "HEALTHCARE_COVERAGE_fpdeykrohb",
            "name": "HEALTHCARE_COVERAGE",
            "name_plural": null,
            "description": null,
            "source_id": 35,
            "concept_handler_id": 41,
            "collection_id": 32,
            "category_id": 46,
            "order": 25.0,
            "multivalue": true,
            "published": true,
            "include_in_cohort_def": true,
            "include_in_table_def": true,
            "include_in_analysis_def": true,
            "has_phi": false,
            "exclude_from_aggregated": false,
            "concept_for_prefilter_id": null,
            "prefilter_mode": "required"
        },
        {
            "id": 477,
            "permanent_id": "HEALTHCARE_EXPENSES_bnxfavndqk",
            "name": "HEALTHCARE_EXPENSES",
            "name_plural": null,
            "description": null,
            "source_id": 35,
            "concept_handler_id": 41,
            "collection_id": 32,
            "category_id": 46,
            "order": 24.0,
            "multivalue": true,
            "published": true,
            "include_in_cohort_def": true,
            "include_in_table_def": true,
            "include_in_analysis_def": true,
            "has_phi": false,
            "exclude_from_aggregated": false,
            "concept_for_prefilter_id": null,
            "prefilter_mode": "required"
        },
        {
            "id": 454,
            "permanent_id": "Id_ujftofurne",
            "name": "Id",
            "name_plural": null,
            "description": null,
            "source_id": 35,
            "concept_handler_id": 41,
            "collection_id": 32,
            "category_id": 46,
            "order": 1.0,
            "multivalue": true,
            "published": true,
            "include_in_cohort_def": true,
            "include_in_table_def": true,
            "include_in_analysis_def": true,
            "has_phi": false,
            "exclude_from_aggregated": false,
            "concept_for_prefilter_id": null,
            "prefilter_mode": "required"
        },
        {
            "id": 462,
            "permanent_id": "LAST_lvdtyeltvh",
            "name": "LAST",
            "name_plural": null,
            "description": null,
            "source_id": 35,
            "concept_handler_id": 41,
            "collection_id": 32,
            "category_id": 46,
            "order": 9.0,
            "multivalue": true,
            "published": true,
            "include_in_cohort_def": true,
            "include_in_table_def": true,
            "include_in_analysis_def": true,
            "has_phi": false,
            "exclude_from_aggregated": false,
            "concept_for_prefilter_id": null,
            "prefilter_mode": "required"
        },
        {
            "id": 475,
            "permanent_id": "LAT_ectrnrzzmt",
            "name": "LAT",
            "name_plural": null,
            "description": null,
            "source_id": 35,
            "concept_handler_id": 41,
            "collection_id": 32,
            "category_id": 46,
            "order": 22.0,
            "multivalue": true,
            "published": true,
            "include_in_cohort_def": true,
            "include_in_table_def": true,
            "include_in_analysis_def": true,
            "has_phi": false,
            "exclude_from_aggregated": false,
            "concept_for_prefilter_id": null,
            "prefilter_mode": "required"
        },
        {
            "id": 476,
            "permanent_id": "LON_btxdcoecbp",
            "name": "LON",
            "name_plural": null,
            "description": null,
            "source_id": 35,
            "concept_handler_id": 41,
            "collection_id": 32,
            "category_id": 46,
            "order": 23.0,
            "multivalue": true,
            "published": true,
            "include_in_cohort_def": true,
            "include_in_table_def": true,
            "include_in_analysis_def": true,
            "has_phi": false,
            "exclude_from_aggregated": false,
            "concept_for_prefilter_id": null,
            "prefilter_mode": "required"
        },
        {
            "id": 464,
            "permanent_id": "MAIDEN_oxgyyvmsqe",
            "name": "MAIDEN",
            "name_plural": null,
            "description": null,
            "source_id": 35,
            "concept_handler_id": 41,
            "collection_id": 32,
            "category_id": 46,
            "order": 11.0,
            "multivalue": true,
            "published": true,
            "include_in_cohort_def": true,
            "include_in_table_def": true,
            "include_in_analysis_def": true,
            "has_phi": false,
            "exclude_from_aggregated": false,
            "concept_for_prefilter_id": null,
            "prefilter_mode": "required"
        },
        {
            "id": 465,
            "permanent_id": "MARRIED_ajgdgwsrug",
            "name": "MARRIED",
            "name_plural": null,
            "description": null,
            "source_id": 35,
            "concept_handler_id": 41,
            "collection_id": 32,
            "category_id": 46,
            "order": 12.0,
            "multivalue": true,
            "published": true,
            "include_in_cohort_def": true,
            "include_in_table_def": true,
            "include_in_analysis_def": true,
            "has_phi": false,
            "exclude_from_aggregated": false,
            "concept_for_prefilter_id": null,
            "prefilter_mode": "required"
        },
        {
            "id": 459,
            "permanent_id": "PASSPORT_xohxdxoath",
            "name": "PASSPORT",
            "name_plural": null,
            "description": null,
            "source_id": 35,
            "concept_handler_id": 41,
            "collection_id": 32,
            "category_id": 46,
            "order": 6.0,
            "multivalue": true,
            "published": true,
            "include_in_cohort_def": true,
            "include_in_table_def": true,
            "include_in_analysis_def": true,
            "has_phi": false,
            "exclude_from_aggregated": false,
            "concept_for_prefilter_id": null,
            "prefilter_mode": "required"
        },
        {
            "id": 460,
            "permanent_id": "PREFIX_wohgaoakmg",
            "name": "PREFIX",
            "name_plural": null,
            "description": null,
            "source_id": 35,
            "concept_handler_id": 41,
            "collection_id": 32,
            "category_id": 46,
            "order": 7.0,
            "multivalue": true,
            "published": true,
            "include_in_cohort_def": true,
            "include_in_table_def": true,
            "include_in_analysis_def": true,
            "has_phi": false,
            "exclude_from_aggregated": false,
            "concept_for_prefilter_id": null,
            "prefilter_mode": "required"
        },
        {
            "id": 466,
            "permanent_id": "RACE_bazapgxjle",
            "name": "RACE",
            "name_plural": null,
            "description": null,
            "source_id": 35,
            "concept_handler_id": 41,
            "collection_id": 32,
            "category_id": 46,
            "order": 13.0,
            "multivalue": true,
            "published": true,
            "include_in_cohort_def": true,
            "include_in_table_def": true,
            "include_in_analysis_def": true,
            "has_phi": false,
            "exclude_from_aggregated": false,
            "concept_for_prefilter_id": null,
            "prefilter_mode": "required"
        },
        {
            "id": 457,
            "permanent_id": "SSN_vfbikhyoao",
            "name": "SSN",
            "name_plural": null,
            "description": null,
            "source_id": 35,
            "concept_handler_id": 41,
            "collection_id": 32,
            "category_id": 46,
            "order": 4.0,
            "multivalue": true,
            "published": true,
            "include_in_cohort_def": true,
            "include_in_table_def": true,
            "include_in_analysis_def": true,
            "has_phi": false,
            "exclude_from_aggregated": false,
            "concept_for_prefilter_id": null,
            "prefilter_mode": "required"
        },
        {
            "id": 472,
            "permanent_id": "STATE_rowvvwihgl",
            "name": "STATE",
            "name_plural": null,
            "description": null,
            "source_id": 35,
            "concept_handler_id": 41,
            "collection_id": 32,
            "category_id": 46,
            "order": 19.0,
            "multivalue": true,
            "published": true,
            "include_in_cohort_def": true,
            "include_in_table_def": true,
            "include_in_analysis_def": true,
            "has_phi": false,
            "exclude_from_aggregated": false,
            "concept_for_prefilter_id": null,
            "prefilter_mode": "required"
        },
        {
            "id": 479,
            "permanent_id": "STUDY_GROUP_A_mjajgwerhd",
            "name": "STUDY_GROUP_A",
            "name_plural": null,
            "description": null,
            "source_id": 35,
            "concept_handler_id": 41,
            "collection_id": 32,
            "category_id": 46,
            "order": 26.0,
            "multivalue": true,
            "published": true,
            "include_in_cohort_def": true,
            "include_in_table_def": true,
            "include_in_analysis_def": true,
            "has_phi": false,
            "exclude_from_aggregated": false,
            "concept_for_prefilter_id": null,
            "prefilter_mode": "required"
        },
        {
            "id": 480,
            "permanent_id": "STUDY_GROUP_B_rjjaredsac",
            "name": "STUDY_GROUP_B",
            "name_plural": null,
            "description": null,
            "source_id": 35,
            "concept_handler_id": 41,
            "collection_id": 32,
            "category_id": 46,
            "order": 27.0,
            "multivalue": true,
            "published": true,
            "include_in_cohort_def": true,
            "include_in_table_def": true,
            "include_in_analysis_def": true,
            "has_phi": false,
            "exclude_from_aggregated": false,
            "concept_for_prefilter_id": null,
            "prefilter_mode": "required"
        },
        {
            "id": 481,
            "permanent_id": "STUDY_GROUP_C_vpbxtmeumv",
            "name": "STUDY_GROUP_C",
            "name_plural": null,
            "description": null,
            "source_id": 35,
            "concept_handler_id": 41,
            "collection_id": 32,
            "category_id": 46,
            "order": 28.0,
            "multivalue": true,
            "published": true,
            "include_in_cohort_def": true,
            "include_in_table_def": true,
            "include_in_analysis_def": true,
            "has_phi": false,
            "exclude_from_aggregated": false,
            "concept_for_prefilter_id": null,
            "prefilter_mode": "required"
        },
        {
            "id": 463,
            "permanent_id": "SUFFIX_recbqouzky",
            "name": "SUFFIX",
            "name_plural": null,
            "description": null,
            "source_id": 35,
            "concept_handler_id": 41,
            "collection_id": 32,
            "category_id": 46,
            "order": 10.0,
            "multivalue": true,
            "published": true,
            "include_in_cohort_def": true,
            "include_in_table_def": true,
            "include_in_analysis_def": true,
            "has_phi": false,
            "exclude_from_aggregated": false,
            "concept_for_prefilter_id": null,
            "prefilter_mode": "required"
        },
        {
            "id": 474,
            "permanent_id": "ZIP_eghyzmsnwk",
            "name": "ZIP",
            "name_plural": null,
            "description": null,
            "source_id": 35,
            "concept_handler_id": 41,
            "collection_id": 32,
            "category_id": 46,
            "order": 21.0,
            "multivalue": true,
            "published": true,
            "include_in_cohort_def": true,
            "include_in_table_def": true,
            "include_in_analysis_def": true,
            "has_phi": false,
            "exclude_from_aggregated": false,
            "concept_for_prefilter_id": null,
            "prefilter_mode": "required"
        },
        {
            "id": 753,
            "permanent_id": "autocreated_subject_id",
            "name": "autocreated ID",
            "name_plural": null,
            "description": "",
            "source_id": 66,
            "concept_handler_id": 46,
            "collection_id": 32,
            "category_id": 46,
            "order": 1.1,
            "multivalue": true,
            "published": true,
            "include_in_cohort_def": true,
            "include_in_table_def": true,
            "include_in_analysis_def": true,
            "has_phi": false,
            "exclude_from_aggregated": false,
            "concept_for_prefilter_id": null,
            "prefilter_mode": "required"
        },
        {
            "id": 755,
            "permanent_id": "d2_current_age",
            "name": "subject age",
            "name_plural": null,
            "description": "",
            "source_id": 66,
            "concept_handler_id": 49,
            "collection_id": 32,
            "category_id": 46,
            "order": 3.1,
            "multivalue": true,
            "published": true,
            "include_in_cohort_def": true,
            "include_in_table_def": true,
            "include_in_analysis_def": true,
            "has_phi": false,
            "exclude_from_aggregated": false,
            "concept_for_prefilter_id": null,
            "prefilter_mode": "required"
        }
    ],
    "default_table_def_concepts": [],
    "concept_handler_args": [
        {
            "id": 459,
            "concept_id": 454,
            "name": "field_name",
            "data_type": "string",
            "value": "Id"
        },
        {
            "id": 460,
            "concept_id": 455,
            "name": "field_name",
            "data_type": "string",
            "value": "BIRTHDATE"
        },
        {
            "id": 461,
            "concept_id": 456,
            "name": "field_name",
            "data_type": "string",
            "value": "DEATHDATE"
        },
        {
            "id": 462,
            "concept_id": 457,
            "name": "field_name",
            "data_type": "string",
            "value": "SSN"
        },
        {
            "id": 463,
            "concept_id": 458,
            "name": "field_name",
            "data_type": "string",
            "value": "DRIVERS"
        },
        {
            "id": 464,
            "concept_id": 459,
            "name": "field_name",
            "data_type": "string",
            "value": "PASSPORT"
        },
        {
            "id": 465,
            "concept_id": 460,
            "name": "field_name",
            "data_type": "string",
            "value": "PREFIX"
        },
        {
            "id": 466,
            "concept_id": 461,
            "name": "field_name",
            "data_type": "string",
            "value": "FIRST"
        },
        {
            "id": 467,
            "concept_id": 462,
            "name": "field_name",
            "data_type": "string",
            "value": "LAST"
        },
        {
            "id": 468,
            "concept_id": 463,
            "name": "field_name",
            "data_type": "string",
            "value": "SUFFIX"
        },
        {
            "id": 469,
            "concept_id": 464,
            "name": "field_name",
            "data_type": "string",
            "value": "MAIDEN"
        },
        {
            "id": 470,
            "concept_id": 465,
            "name": "field_name",
            "data_type": "string",
            "value": "MARRIED"
        },
        {
            "id": 471,
            "concept_id": 466,
            "name": "field_name",
            "data_type": "string",
            "value": "RACE"
        },
        {
            "id": 472,
            "concept_id": 467,
            "name": "field_name",
            "data_type": "string",
            "value": "ETHNICITY"
        },
        {
            "id": 473,
            "concept_id": 468,
            "name": "field_name",
            "data_type": "string",
            "value": "GENDER"
        },
        {
            "id": 474,
            "concept_id": 469,
            "name": "field_name",
            "data_type": "string",
            "value": "BIRTHPLACE"
        },
        {
            "id": 475,
            "concept_id": 470,
            "name": "field_name",
            "data_type": "string",
            "value": "ADDRESS"
        },
        {
            "id": 476,
            "concept_id": 471,
            "name": "field_name",
            "data_type": "string",
            "value": "CITY"
        },
        {
            "id": 477,
            "concept_id": 472,
            "name": "field_name",
            "data_type": "string",
            "value": "STATE"
        },
        {
            "id": 478,
            "concept_id": 473,
            "name": "field_name",
            "data_type": "string",
            "value": "COUNTY"
        },
        {
            "id": 479,
            "concept_id": 474,
            "name": "field_name",
            "data_type": "string",
            "value": "ZIP"
        },
        {
            "id": 480,
            "concept_id": 475,
            "name": "field_name",
            "data_type": "string",
            "value": "LAT"
        },
        {
            "id": 481,
            "concept_id": 476,
            "name": "field_name",
            "data_type": "string",
            "value": "LON"
        },
        {
            "id": 482,
            "concept_id": 477,
            "name": "field_name",
            "data_type": "string",
            "value": "HEALTHCARE_EXPENSES"
        },
        {
            "id": 483,
            "concept_id": 478,
            "name": "field_name",
            "data_type": "string",
            "value": "HEALTHCARE_COVERAGE"
        },
        {
            "id": 484,
            "concept_id": 479,
            "name": "field_name",
            "data_type": "string",
            "value": "STUDY_GROUP_A"
        },
        {
            "id": 485,
            "concept_id": 480,
            "name": "field_name",
            "data_type": "string",
            "value": "STUDY_GROUP_B"
        },
        {
            "id": 486,
            "concept_id": 481,
            "name": "field_name",
            "data_type": "string",
            "value": "STUDY_GROUP_C"
        },
        {
            "id": 758,
            "concept_id": 753,
            "name": "input_fields",
            "data_type": "string",
            "value": "Id_ujftofurne, SSN_vfbikhyoao"
        },
        {
            "id": 759,
            "concept_id": 753,
            "name": "length",
            "data_type": "integer",
            "value": "12"
        },
        {
            "id": 762,
            "concept_id": 755,
            "name": "field_name",
            "data_type": "string",
            "value": "BIRTHDATE_dvsqsuccxv"
        },
        {
            "id": 763,
            "concept_id": 755,
            "name": "death_date_field_name",
            "data_type": "string",
            "value": "DEATHDATE_pwedudwsts"
        },
        {
            "id": 487,
            "concept_id": 482,
            "name": "subcol_fields",
            "data_type": "string",
            "value": "START_wptpwtchpc"
        },
        {
            "id": 761,
            "concept_id": 482,
            "name": "subject_fields",
            "data_type": "string",
            "value": "Id_ujftofurne"
        },
        {
            "id": 488,
            "concept_id": 483,
            "name": "field_name",
            "data_type": "string",
            "value": "START"
        },
        {
            "id": 489,
            "concept_id": 484,
            "name": "field_name",
            "data_type": "string",
            "value": "STOP"
        },
        {
            "id": 490,
            "concept_id": 485,
            "name": "field_name",
            "data_type": "string",
            "value": "PATIENT"
        },
        {
            "id": 491,
            "concept_id": 486,
            "name": "field_name",
            "data_type": "string",
            "value": "PASSPORT"
        },
        {
            "id": 492,
            "concept_id": 487,
            "name": "field_name",
            "data_type": "string",
            "value": "ORGANIZATION"
        },
        {
            "id": 493,
            "concept_id": 488,
            "name": "field_name",
            "data_type": "string",
            "value": "PROVIDER"
        },
        {
            "id": 494,
            "concept_id": 489,
            "name": "field_name",
            "data_type": "string",
            "value": "PAYER"
        },
        {
            "id": 495,
            "concept_id": 490,
            "name": "field_name",
            "data_type": "string",
            "value": "ENCOUNTERCLASS"
        },
        {
            "id": 496,
            "concept_id": 491,
            "name": "field_name",
            "data_type": "string",
            "value": "CODE"
        },
        {
            "id": 497,
            "concept_id": 492,
            "name": "field_name",
            "data_type": "string",
            "value": "DESCRIPTION"
        },
        {
            "id": 498,
            "concept_id": 493,
            "name": "field_name",
            "data_type": "string",
            "value": "BASE_ENCOUNTER_COST"
        },
        {
            "id": 499,
            "concept_id": 494,
            "name": "field_name",
            "data_type": "string",
            "value": "TOTAL_CLAIM_COST"
        },
        {
            "id": 500,
            "concept_id": 495,
            "name": "field_name",
            "data_type": "string",
            "value": "PAYER_COVERAGE"
        },
        {
            "id": 501,
            "concept_id": 496,
            "name": "field_name",
            "data_type": "string",
            "value": "REASONCODE"
        },
        {
            "id": 502,
            "concept_id": 497,
            "name": "field_name",
            "data_type": "string",
            "value": "REASONDESCRIPTION"
        },
        {
            "id": 760,
            "concept_id": 754,
            "name": "field_name",
            "data_type": "string",
            "value": "Id"
        },
        {
            "id": 764,
            "concept_id": 756,
            "name": "dob_concept_id",
            "data_type": "string",
            "value": "BIRTHDATE_dvsqsuccxv"
        },
        {
            "id": 765,
            "concept_id": 756,
            "name": "event_date_concept_id",
            "data_type": "string",
            "value": "START_wptpwtchpc"
        }
    ],
    "source_processor_args": [
        {
            "id": 102,
            "source_id": 35,
            "name": "filepath",
            "data_type": "string",
            "value": "source_data/patients2.csv"
        },
        {
            "id": 103,
            "source_id": 35,
            "name": "subject_matching_source_id_field",
            "data_type": "string",
            "value": "Id"
        },
        {
            "id": 104,
            "source_id": 35,
            "name": "add_subject_ids",
            "data_type": "string",
            "value": "[{\"source_id_field\": \"SSN\", \"destination_id_field\": \"ssn\"}, {\"source_id_field\": \"PASSPORT\", \"destination_id_field\": \"passport_number\"}]"
        },
        {
            "id": 105,
            "source_id": 36,
            "name": "filepath",
            "data_type": "string",
            "value": "source_data/encounters2.csv"
        },
        {
            "id": 106,
            "source_id": 36,
            "name": "subject_matching",
            "data_type": "string",
            "value": "{\"source_id_field\": \"PASSPORT\", \"destination_id_field\": \"passport_number\", \"if_no_match\": \"skip\"}"
        },
        {
            "id": 107,
            "source_id": 36,
            "name": "collection_id_field",
            "data_type": "string",
            "value": "Id"
        }
    ],
    "source_source_dependencies": [
        {
            "id": 1,
            "source_id": 36,
            "depends_on_source_id": 35,
            "description": "encounters only load if the patient already exists"
        }
    ],
    "concept_concept_dependencies": [
        {
            "id": 1,
            "concept_id": 753,
            "depends_on_concept_id": 454,
            "description": "input for calculated field"
        },
        {
            "id": 2,
            "concept_id": 753,
            "depends_on_concept_id": 457,
            "description": "input for calculated field"
        },
        {
            "id": 5,
            "concept_id": 755,
            "depends_on_concept_id": 455,
            "description": "input for calculated field"
        },
        {
            "id": 6,
            "concept_id": 755,
            "depends_on_concept_id": 456,
            "description": "input for calculated field"
        },
        {
            "id": 3,
            "concept_id": 482,
            "depends_on_concept_id": 483,
            "description": "used as input field"
        },
        {
            "id": 4,
            "concept_id": 482,
            "depends_on_concept_id": 454,
            "description": "used as input field"
        },
        {
            "id": 7,
            "concept_id": 756,
            "depends_on_concept_id": 455,
            "description": ""
        },
        {
            "id": 8,
            "concept_id": 756,
            "depends_on_concept_id": 483,
            "description": ""
        }
    ],
    "concept_source_dependencies": [],
    "autocreated_fields": [
        {
            "id": 382,
            "created": "2022-11-14 16:43:22.512000",
            "modified": "2022-11-14 16:43:22.512000",
            "dataset_id": 11,
            "app": null,
            "model": null,
            "field": "Id",
            "unique_source_id": "d2_patients",
            "associated_concept_id": 454
        },
        {
            "id": 383,
            "created": "2022-11-14 16:43:22.525000",
            "modified": "2022-11-14 16:43:22.525000",
            "dataset_id": 11,
            "app": null,
            "model": null,
            "field": "BIRTHDATE",
            "unique_source_id": "d2_patients",
            "associated_concept_id": 455
        },
        {
            "id": 384,
            "created": "2022-11-14 16:43:22.537000",
            "modified": "2022-11-14 16:43:22.537000",
            "dataset_id": 11,
            "app": null,
            "model": null,
            "field": "DEATHDATE",
            "unique_source_id": "d2_patients",
            "associated_concept_id": 456
        },
        {
            "id": 385,
            "created": "2022-11-14 16:43:22.549000",
            "modified": "2022-11-14 16:43:22.549000",
            "dataset_id": 11,
            "app": null,
            "model": null,
            "field": "SSN",
            "unique_source_id": "d2_patients",
            "associated_concept_id": 457
        },
        {
            "id": 386,
            "created": "2022-11-14 16:43:22.562000",
            "modified": "2022-11-14 16:43:22.562000",
            "dataset_id": 11,
            "app": null,
            "model": null,
            "field": "DRIVERS",
            "unique_source_id": "d2_patients",
            "associated_concept_id": 458
        },
        {
            "id": 387,
            "created": "2022-11-14 16:43:22.576000",
            "modified": "2022-11-14 16:43:22.576000",
            "dataset_id": 11,
            "app": null,
            "model": null,
            "field": "PASSPORT",
            "unique_source_id": "d2_patients",
            "associated_concept_id": 459
        },
        {
            "id": 388,
            "created": "2022-11-14 16:43:22.589000",
            "modified": "2022-11-14 16:43:22.589000",
            "dataset_id": 11,
            "app": null,
            "model": null,
            "field": "PREFIX",
            "unique_source_id": "d2_patients",
            "associated_concept_id": 460
        },
        {
            "id": 389,
            "created": "2022-11-14 16:43:22.602000",
            "modified": "2022-11-14 16:43:22.602000",
            "dataset_id": 11,
            "app": null,
            "model": null,
            "field": "FIRST",
            "unique_source_id": "d2_patients",
            "associated_concept_id": 461
        },
        {
            "id": 390,
            "created": "2022-11-14 16:43:22.612000",
            "modified": "2022-11-14 16:43:22.612000",
            "dataset_id": 11,
            "app": null,
            "model": null,
            "field": "LAST",
            "unique_source_id": "d2_patients",
            "associated_concept_id": 462
        },
        {
            "id": 391,
            "created": "2022-11-14 16:43:22.626000",
            "modified": "2022-11-14 16:43:22.626000",
            "dataset_id": 11,
            "app": null,
            "model": null,
            "field": "SUFFIX",
            "unique_source_id": "d2_patients",
            "associated_concept_id": 463
        },
        {
            "id": 392,
            "created": "2022-11-14 16:43:22.638000",
            "modified": "2022-11-14 16:43:22.638000",
            "dataset_id": 11,
            "app": null,
            "model": null,
            "field": "MAIDEN",
            "unique_source_id": "d2_patients",
            "associated_concept_id": 464
        },
        {
            "id": 393,
            "created": "2022-11-14 16:43:22.650000",
            "modified": "2022-11-14 16:43:22.650000",
            "dataset_id": 11,
            "app": null,
            "model": null,
            "field": "MARRIED",
            "unique_source_id": "d2_patients",
            "associated_concept_id": 465
        },
        {
            "id": 394,
            "created": "2022-11-14 16:43:22.665000",
            "modified": "2022-11-14 16:43:22.665000",
            "dataset_id": 11,
            "app": null,
            "model": null,
            "field": "RACE",
            "unique_source_id": "d2_patients",
            "associated_concept_id": 466
        },
        {
            "id": 395,
            "created": "2022-11-14 16:43:22.677000",
            "modified": "2022-11-14 16:43:22.677000",
            "dataset_id": 11,
            "app": null,
            "model": null,
            "field": "ETHNICITY",
            "unique_source_id": "d2_patients",
            "associated_concept_id": 467
        },
        {
            "id": 396,
            "created": "2022-11-14 16:43:22.688000",
            "modified": "2022-11-14 16:43:22.688000",
            "dataset_id": 11,
            "app": null,
            "model": null,
            "field": "GENDER",
            "unique_source_id": "d2_patients",
            "associated_concept_id": 468
        },
        {
            "id": 397,
            "created": "2022-11-14 16:43:22.700000",
            "modified": "2022-11-14 16:43:22.700000",
            "dataset_id": 11,
            "app": null,
            "model": null,
            "field": "BIRTHPLACE",
            "unique_source_id": "d2_patients",
            "associated_concept_id": 469
        },
        {
            "id": 398,
            "created": "2022-11-14 16:43:22.716000",
            "modified": "2022-11-14 16:43:22.716000",
            "dataset_id": 11,
            "app": null,
            "model": null,
            "field": "ADDRESS",
            "unique_source_id": "d2_patients",
            "associated_concept_id": 470
        },
        {
            "id": 399,
            "created": "2022-11-14 16:43:22.728000",
            "modified": "2022-11-14 16:43:22.728000",
            "dataset_id": 11,
            "app": null,
            "model": null,
            "field": "CITY",
            "unique_source_id": "d2_patients",
            "associated_concept_id": 471
        },
        {
            "id": 400,
            "created": "2022-11-14 16:43:22.740000",
            "modified": "2022-11-14 16:43:22.740000",
            "dataset_id": 11,
            "app": null,
            "model": null,
            "field": "STATE",
            "unique_source_id": "d2_patients",
            "associated_concept_id": 472
        },
        {
            "id": 401,
            "created": "2022-11-14 16:43:22.754000",
            "modified": "2022-11-14 16:43:22.754000",
            "dataset_id": 11,
            "app": null,
            "model": null,
            "field": "COUNTY",
            "unique_source_id": "d2_patients",
            "associated_concept_id": 473
        },
        {
            "id": 402,
            "created": "2022-11-14 16:43:22.766000",
            "modified": "2022-11-14 16:43:22.766000",
            "dataset_id": 11,
            "app": null,
            "model": null,
            "field": "ZIP",
            "unique_source_id": "d2_patients",
            "associated_concept_id": 474
        },
        {
            "id": 403,
            "created": "2022-11-14 16:43:22.778000",
            "modified": "2022-11-14 16:43:22.778000",
            "dataset_id": 11,
            "app": null,
            "model": null,
            "field": "LAT",
            "unique_source_id": "d2_patients",
            "associated_concept_id": 475
        },
        {
            "id": 404,
            "created": "2022-11-14 16:43:22.792000",
            "modified": "2022-11-14 16:43:22.792000",
            "dataset_id": 11,
            "app": null,
            "model": null,
            "field": "LON",
            "unique_source_id": "d2_patients",
            "associated_concept_id": 476
        },
        {
            "id": 405,
            "created": "2022-11-14 16:43:22.804000",
            "modified": "2022-11-14 16:43:22.804000",
            "dataset_id": 11,
            "app": null,
            "model": null,
            "field": "HEALTHCARE_EXPENSES",
            "unique_source_id": "d2_patients",
            "associated_concept_id": 477
        },
        {
            "id": 406,
            "created": "2022-11-14 16:43:22.819000",
            "modified": "2022-11-14 16:43:22.819000",
            "dataset_id": 11,
            "app": null,
            "model": null,
            "field": "HEALTHCARE_COVERAGE",
            "unique_source_id": "d2_patients",
            "associated_concept_id": 478
        },
        {
            "id": 407,
            "created": "2022-11-14 16:43:22.832000",
            "modified": "2022-11-14 16:43:22.832000",
            "dataset_id": 11,
            "app": null,
            "model": null,
            "field": "STUDY_GROUP_A",
            "unique_source_id": "d2_patients",
            "associated_concept_id": 479
        },
        {
            "id": 408,
            "created": "2022-11-14 16:43:22.843000",
            "modified": "2022-11-14 16:43:22.843000",
            "dataset_id": 11,
            "app": null,
            "model": null,
            "field": "STUDY_GROUP_B",
            "unique_source_id": "d2_patients",
            "associated_concept_id": 480
        },
        {
            "id": 409,
            "created": "2022-11-14 16:43:22.856000",
            "modified": "2022-11-14 16:43:22.856000",
            "dataset_id": 11,
            "app": null,
            "model": null,
            "field": "STUDY_GROUP_C",
            "unique_source_id": "d2_patients",
            "associated_concept_id": 481
        },
        {
            "id": 410,
            "created": "2022-11-14 16:43:22.946000",
            "modified": "2022-11-14 16:43:22.946000",
            "dataset_id": 11,
            "app": null,
            "model": null,
            "field": "Id",
            "unique_source_id": "d2_encounters",
            "associated_concept_id": 482
        },
        {
            "id": 411,
            "created": "2022-11-14 16:43:22.958000",
            "modified": "2022-11-14 16:43:22.958000",
            "dataset_id": 11,
            "app": null,
            "model": null,
            "field": "START",
            "unique_source_id": "d2_encounters",
            "associated_concept_id": 483
        },
        {
            "id": 412,
            "created": "2022-11-14 16:43:24.430000",
            "modified": "2022-11-14 16:43:24.430000",
            "dataset_id": 11,
            "app": null,
            "model": null,
            "field": "STOP",
            "unique_source_id": "d2_encounters",
            "associated_concept_id": 484
        },
        {
            "id": 413,
            "created": "2022-11-14 16:43:24.453000",
            "modified": "2022-11-14 16:43:24.453000",
            "dataset_id": 11,
            "app": null,
            "model": null,
            "field": "PATIENT",
            "unique_source_id": "d2_encounters",
            "associated_concept_id": 485
        },
        {
            "id": 414,
            "created": "2022-11-14 16:43:24.472000",
            "modified": "2022-11-14 16:43:24.472000",
            "dataset_id": 11,
            "app": null,
            "model": null,
            "field": "PASSPORT",
            "unique_source_id": "d2_encounters",
            "associated_concept_id": 486
        },
        {
            "id": 415,
            "created": "2022-11-14 16:43:24.486000",
            "modified": "2022-11-14 16:43:24.486000",
            "dataset_id": 11,
            "app": null,
            "model": null,
            "field": "ORGANIZATION",
            "unique_source_id": "d2_encounters",
            "associated_concept_id": 487
        },
        {
            "id": 416,
            "created": "2022-11-14 16:43:24.500000",
            "modified": "2022-11-14 16:43:24.500000",
            "dataset_id": 11,
            "app": null,
            "model": null,
            "field": "PROVIDER",
            "unique_source_id": "d2_encounters",
            "associated_concept_id": 488
        },
        {
            "id": 417,
            "created": "2022-11-14 16:43:24.511000",
            "modified": "2022-11-14 16:43:24.511000",
            "dataset_id": 11,
            "app": null,
            "model": null,
            "field": "PAYER",
            "unique_source_id": "d2_encounters",
            "associated_concept_id": 489
        },
        {
            "id": 418,
            "created": "2022-11-14 16:43:24.524000",
            "modified": "2022-11-14 16:43:24.524000",
            "dataset_id": 11,
            "app": null,
            "model": null,
            "field": "ENCOUNTERCLASS",
            "unique_source_id": "d2_encounters",
            "associated_concept_id": 490
        },
        {
            "id": 419,
            "created": "2022-11-14 16:43:24.536000",
            "modified": "2022-11-14 16:43:24.536000",
            "dataset_id": 11,
            "app": null,
            "model": null,
            "field": "CODE",
            "unique_source_id": "d2_encounters",
            "associated_concept_id": 491
        },
        {
            "id": 420,
            "created": "2022-11-14 16:43:24.550000",
            "modified": "2022-11-14 16:43:24.550000",
            "dataset_id": 11,
            "app": null,
            "model": null,
            "field": "DESCRIPTION",
            "unique_source_id": "d2_encounters",
            "associated_concept_id": 492
        },
        {
            "id": 421,
            "created": "2022-11-14 16:43:24.563000",
            "modified": "2022-11-14 16:43:24.563000",
            "dataset_id": 11,
            "app": null,
            "model": null,
            "field": "BASE_ENCOUNTER_COST",
            "unique_source_id": "d2_encounters",
            "associated_concept_id": 493
        },
        {
            "id": 422,
            "created": "2022-11-14 16:43:24.575000",
            "modified": "2022-11-14 16:43:24.575000",
            "dataset_id": 11,
            "app": null,
            "model": null,
            "field": "TOTAL_CLAIM_COST",
            "unique_source_id": "d2_encounters",
            "associated_concept_id": 494
        },
        {
            "id": 423,
            "created": "2022-11-14 16:43:24.592000",
            "modified": "2022-11-14 16:43:24.592000",
            "dataset_id": 11,
            "app": null,
            "model": null,
            "field": "PAYER_COVERAGE",
            "unique_source_id": "d2_encounters",
            "associated_concept_id": 495
        },
        {
            "id": 424,
            "created": "2022-11-14 16:43:24.606000",
            "modified": "2022-11-14 16:43:24.606000",
            "dataset_id": 11,
            "app": null,
            "model": null,
            "field": "REASONCODE",
            "unique_source_id": "d2_encounters",
            "associated_concept_id": 496
        },
        {
            "id": 425,
            "created": "2022-11-14 16:43:24.622000",
            "modified": "2022-11-14 16:43:24.622000",
            "dataset_id": 11,
            "app": null,
            "model": null,
            "field": "REASONDESCRIPTION",
            "unique_source_id": "d2_encounters",
            "associated_concept_id": 497
        }
    ],
    "processors": [
        {
            "id": 32,
            "name": "EtlDjangoField",
            "required_args": "(oConcept, django_field, cast_to_type=None, ignore_casting_errors=False, ignore_model_mismatch=False)",
            "optional_args": "cast_to_type, ignore_casting_errors, ignore_model_mismatch",
            "is_source_processor": false,
            "is_etl_processor": true,
            "is_cohort_def_processor": false,
            "is_display_processor": false,
            "is_permission_processor": false,
            "python_path": "chiron.processors.etl.django_field.EtlDjangoField",
            "description": "\n    Use with a source collection of Django models. Will pull a single field value from each\n    model object.\n\n    :param django_field: full path name from the source model to the Django field\n    :type django_field: str\n    :param cast_to_type: the Django field name\n    :type cast_to_type: str, optional (int, float, string, date)\n    :param ignore_casting_errors: If cast_to_type fails, returns None instead of throwing an error\n    :type ignore_casting_errors: boolean, optional (default=False)\n    :param ignore_model_mismatch:\n    :type ignore_model_mismatch: boolean, optional (default=False)\n    "
        },
        {
            "id": 33,
            "name": "EtlDjangoMultifieldMerge",
            "required_args": "(oConcept, django_field, **kwargs)",
            "optional_args": "django_field2, ..., cast_to_type, ignore_casting_errors, ignore_model_mismatch",
            "is_source_processor": false,
            "is_etl_processor": true,
            "is_cohort_def_processor": false,
            "is_display_processor": false,
            "is_permission_processor": false,
            "python_path": "chiron.processors.etl.django_multifield_merge.EtlDjangoMultifieldMerge",
            "description": "Same behavior as EtlProcessorForDjangoField, except multiple django fields\n    can be provided.\n    After passing django_field and model_join_path like normal, provide additional\n    fields\n    by passing django_field2 & model_join_path2, django_field3 & model_join_path3,\n    etc.\n    "
        },
        {
            "id": 34,
            "name": "EtlPythonDictItem",
            "required_args": "(oConcept, field_name, cast_to_type=None, ignore_casting_errors=False, convert_list_to_set=True, string_val_separator=None)",
            "optional_args": "cast_to_type, ignore_casting_errors, convert_list_to_set",
            "is_source_processor": false,
            "is_etl_processor": true,
            "is_cohort_def_processor": false,
            "is_display_processor": false,
            "is_permission_processor": false,
            "python_path": "chiron.processors.etl.python_dict_item.EtlPythonDictItem",
            "description": "\n    Use with a source collection that returns a Python dictionary.\n\n    :param field_name: the key value for the field you want\n    :type field_name: str\n    :param cast_to_type: the Django field name\n    :type cast_to_type: str, optional (int, float, string, date)\n    :param ignore_casting_errors: If cast_to_type fails, returns None instead of throwing an error\n    :type ignore_casting_errors: boolean, optional (default=False)\n    :param convert_list_to_set: if field has a list of multiple values, only get distinct set\n    :type convert_list_to_set: boolean, optional (default=True)\n    :param string_val_separator: if field has a list of multiple values, only get distinct set\n    :type string_val_separator: string, optional (default=None)\n    "
        },
        {
            "id": 35,
            "name": "EtlPythonDictItemCounter",
            "required_args": "(oConcept, field_name, treat_string_as_sequence=False)",
            "optional_args": "treat_string_as_sequence",
            "is_source_processor": false,
            "is_etl_processor": true,
            "is_cohort_def_processor": false,
            "is_display_processor": false,
            "is_permission_processor": false,
            "python_path": "chiron.processors.etl.python_dict_item_counter.EtlPythonDictItemCounter",
            "description": "\n    Retrieves an item (usually a sequence) from a python dict and returns\n    the length of the item as an integer.\n    If field is not a sequence or collection, will return 1 if field evaluates to\n    true and 0 if sequence evaluates to False.\n    By default, a string value returns 1 instead of len(str). Pass\n    treat_string_as_sequence=True to override.\n\n    :param field_name: the key value for the field you want\n    :type field_name: str\n    :param treat_string_as_sequence: if string, return string length instead of 1\n    :type treat_string_as_sequence: boolean, optional (default=False)\n    "
        },
        {
            "id": 36,
            "name": "CohortDefCategory",
            "required_args": "(oUser, oConcept, **kwargs)",
            "optional_args": null,
            "is_source_processor": false,
            "is_etl_processor": false,
            "is_cohort_def_processor": true,
            "is_display_processor": false,
            "is_permission_processor": false,
            "python_path": "chiron.processors.cohort_def.category.CohortDefCategory",
            "description": "\n    When to use:\n\n    * All values should either be a string or null\n    * Don't use if too many distinct values, use TextField instead\n    * don't use if no values repeat (like IDs or free-text comments), use TextField instead\n    * don't use if values are longer than one line of text\n\n    "
        },
        {
            "id": 37,
            "name": "CohortDefBoolean",
            "required_args": "(oUser, oConcept, **kwargs)",
            "optional_args": null,
            "is_source_processor": false,
            "is_etl_processor": false,
            "is_cohort_def_processor": true,
            "is_display_processor": false,
            "is_permission_processor": false,
            "python_path": "chiron.processors.cohort_def.boolean.CohortDefBoolean",
            "description": "\n    This is a subclass of CohortDefCategory and behaves similarly. When to use:\n\n    * All values should be true, false, or null\n    "
        },
        {
            "id": 38,
            "name": "CohortDefDate",
            "required_args": "(oUser, oConcept, **kwargs)",
            "optional_args": null,
            "is_source_processor": false,
            "is_etl_processor": false,
            "is_cohort_def_processor": true,
            "is_display_processor": false,
            "is_permission_processor": false,
            "python_path": "chiron.processors.cohort_def.date.CohortDefDate",
            "description": "\n    When to use:\n\n    * All values should either be a Python datetime object or null\n    * You only care about the date component, typically you will want the time in your\n      datetime values set to 0:00.\n\n    "
        },
        {
            "id": 39,
            "name": "CohortDefDateDeid",
            "required_args": "(oUser, oConcept, **kwargs)",
            "optional_args": null,
            "is_source_processor": false,
            "is_etl_processor": false,
            "is_cohort_def_processor": true,
            "is_display_processor": false,
            "is_permission_processor": false,
            "python_path": "chiron.processors.cohort_def.date_deid.CohortDefDateDeid",
            "description": "\n    This is a deidentified alternative to the DateFieldProcessor. If you use it in place of the\n    DateFieldProcessor, only the date year is presented to the user.\n\n    Typically, this is used in situations where you want users who can view PHI to see/query the\n    whole date, and other users to see/query only the year. To do this in a concept, you will\n    set has_phi to true and set both cohort_def_processor_deid_alt and display_processor_deid_alt\n    to this.\n\n    If you only ever need to use year, an alternative would be to set only the year in Mongo as an\n    integer and use the NumberFieldProcessor.\n\n    "
        },
        {
            "id": 40,
            "name": "CohortDefNumber",
            "required_args": "(oUser, oConcept, is_integer=False, *args, **kwargs)",
            "optional_args": "is_integer",
            "is_source_processor": false,
            "is_etl_processor": false,
            "is_cohort_def_processor": true,
            "is_display_processor": false,
            "is_permission_processor": false,
            "python_path": "chiron.processors.cohort_def.number.CohortDefNumber",
            "description": "\n    When to use:\n\n    * All values should either be numbers or null\n\n    Optional arguments:\n\n    * is_integer: (default: False) set to True if the number has no decimal value.\n      NOTE: This does not round/force numbers to be integers, it only affects how histograms\n      and statistics are calculated/displayed.\n\n    "
        },
        {
            "id": 41,
            "name": "CohortDefText",
            "required_args": "(oUser, oConcept, **kwargs)",
            "optional_args": null,
            "is_source_processor": false,
            "is_etl_processor": false,
            "is_cohort_def_processor": true,
            "is_display_processor": false,
            "is_permission_processor": false,
            "python_path": "chiron.processors.cohort_def.text.CohortDefText",
            "description": "\n    When to use:\n\n    * All values should either be a string or null\n    * If possible values are a limited number of categories, consider using CategoryField\n    * Good for IDs or free-text comments\n    * Not great for long, multi-line free text - like notes - but shouldn't fail either\n\n    "
        },
        {
            "id": 42,
            "name": "CohortDefTextCustomSort",
            "required_args": "(oUser, oConcept, **kwargs)",
            "optional_args": null,
            "is_source_processor": false,
            "is_etl_processor": false,
            "is_cohort_def_processor": true,
            "is_display_processor": false,
            "is_permission_processor": false,
            "python_path": "chiron.processors.cohort_def.text_custom_sort.CohortDefTextCustomSort",
            "description": "\n    When to use:\n\n    * Text field where you want the sorting to be different from alphabetical\n    * good for numbers stored as strings, such as ID numbers\n\n    This processor requires the value be stored as a dict with a string display value and a\n    numeric sort value:\n\n    .. code-block:: python\n\n        {\n            \"value\" : \"my value\",\n            \"sort\" : 1\n        }\n    "
        },
        {
            "id": 43,
            "name": "DisplayGeneric",
            "required_args": "(oUser, oConcept, **kwargs)",
            "optional_args": null,
            "is_source_processor": false,
            "is_etl_processor": false,
            "is_cohort_def_processor": false,
            "is_display_processor": true,
            "is_permission_processor": false,
            "python_path": "chiron.processors.display.display_generic.DisplayGeneric",
            "description": null
        },
        {
            "id": 45,
            "name": "SourceCsv",
            "required_args": "(oSource, filepath, collection_id_field=None, subject_matching=None, subject_matching_source_id_field=None, subject_matching_source_id_delimiter=None, subject_matching_destination_id_field='id', subject_matching_if_no_match='create', add_subject_ids=None)",
            "optional_args": "",
            "is_source_processor": true,
            "is_etl_processor": false,
            "is_cohort_def_processor": false,
            "is_display_processor": false,
            "is_permission_processor": false,
            "python_path": "chiron.processors.source.csv.SourceCsv",
            "description": "\n    Source for CSV. The CSV file needs a header row. The records returned will\n    be Python dicts.\n\n    :param filepath: the file location\n    :type filepath: str\n    :param collection_id_field: the header value for the collection id\n    :type collection_id_field: str\n    :param subject_matching_source_id_field: the header value for the subject collection id\n    :type subject_matching_source_id_field: str\n    "
        },
        {
            "id": 46,
            "name": "DisplayBoolean",
            "required_args": "(oUser, oConcept, **kwargs)",
            "optional_args": null,
            "is_source_processor": false,
            "is_etl_processor": false,
            "is_cohort_def_processor": false,
            "is_display_processor": true,
            "is_permission_processor": false,
            "python_path": "chiron.processors.display.boolean.DisplayBoolean",
            "description": "\n    When to use:\n\n    * All values should be true, false, or null\n    "
        },
        {
            "id": 47,
            "name": "DisplayCategory",
            "required_args": "(oUser, oConcept, **kwargs)",
            "optional_args": null,
            "is_source_processor": false,
            "is_etl_processor": false,
            "is_cohort_def_processor": false,
            "is_display_processor": true,
            "is_permission_processor": false,
            "python_path": "chiron.processors.display.category.DisplayCategory",
            "description": "\n    When to use:\n\n    * All values should either be a string or null\n    * Don't use if too many distinct values, use TextField instead\n    * don't use if no values repeat (like IDs or free-text comments), use TextField instead\n    * don't use if values are longer than one line of text\n\n    "
        },
        {
            "id": 48,
            "name": "DisplayDate",
            "required_args": "(oUser, oConcept, **kwargs)",
            "optional_args": null,
            "is_source_processor": false,
            "is_etl_processor": false,
            "is_cohort_def_processor": false,
            "is_display_processor": true,
            "is_permission_processor": false,
            "python_path": "chiron.processors.display.date.DisplayDate",
            "description": "\n    When to use:\n\n    * All values should either be a Python datetime object or null\n    * You only care about the date component, typically you will want the time in your\n      datetime values set to 0:00.\n\n    "
        },
        {
            "id": 49,
            "name": "DisplayDateDeid",
            "required_args": "(oUser, oConcept, **kwargs)",
            "optional_args": null,
            "is_source_processor": false,
            "is_etl_processor": false,
            "is_cohort_def_processor": false,
            "is_display_processor": true,
            "is_permission_processor": false,
            "python_path": "chiron.processors.display.date_deid.DisplayDateDeid",
            "description": "\n    This is a deidentified alternative to the DateFieldProcessor. If you use it in place of the\n    DateFieldProcessor, only the date year is presented to the user.\n\n    Typically, this is used in situations where you want users who can view PHI to see/query the\n    whole date, and other users to see/query only the year. To do this in a concept, you will\n    set has_phi to true and set both cohort_def_processor_deid_alt and display_processor_deid_alt\n    to this.\n\n    If you only ever need to use year, an alternative would be to set only the year in Mongo as an\n    integer and use the NumberFieldProcessor.\n\n    "
        },
        {
            "id": 50,
            "name": "DisplayNumber",
            "required_args": "(oUser, oConcept, **kwargs)",
            "optional_args": null,
            "is_source_processor": false,
            "is_etl_processor": false,
            "is_cohort_def_processor": false,
            "is_display_processor": true,
            "is_permission_processor": false,
            "python_path": "chiron.processors.display.number.DisplayNumber",
            "description": "\n    When to use:\n\n    * All values should either be numbers or null\n\n    Optional arguments:\n\n    * is_integer: (default: False) set to True if the number has no decimal value.\n      NOTE: This does not round/force numbers to be integers, it only affects how histograms\n      and statistics are calculated/displayed.\n\n    "
        },
        {
            "id": 51,
            "name": "DisplayText",
            "required_args": "(oUser, oConcept, **kwargs)",
            "optional_args": null,
            "is_source_processor": false,
            "is_etl_processor": false,
            "is_cohort_def_processor": false,
            "is_display_processor": true,
            "is_permission_processor": false,
            "python_path": "chiron.processors.display.text.DisplayText",
            "description": "\n    When to use:\n\n    * All values should either be a string or null\n    * If possible values are a limited number of categories, consider using CategoryField\n    * Good for IDs or free-text comments\n    * Not great for long, multi-line free text - like notes - but shouldn't fail either\n\n    "
        },
        {
            "id": 52,
            "name": "DisplayTextCustomSort",
            "required_args": "(oUser, oConcept, **kwargs)",
            "optional_args": null,
            "is_source_processor": false,
            "is_etl_processor": false,
            "is_cohort_def_processor": false,
            "is_display_processor": true,
            "is_permission_processor": false,
            "python_path": "chiron.processors.display.text_custom_sort.DisplayTextCustomSort",
            "description": "\n    When to use:\n\n    * Text field where you want the sorting to be different from alphabetical\n    * good for numbers stored as strings, such as ID numbers\n\n    This processor requires the value be stored as a dict with a string display value and a\n    numeric sort value:\n\n    .. code-block:: python\n\n        {\n            \"value\" : \"my value\",\n            \"sort\" : 1\n        }\n    "
        },
        {
            "id": 145,
            "name": "DisplaySubjectHyperlink",
            "required_args": "(oUser, oConcept, **kwargs)",
            "optional_args": null,
            "is_source_processor": false,
            "is_etl_processor": false,
            "is_cohort_def_processor": false,
            "is_display_processor": true,
            "is_permission_processor": false,
            "python_path": "chiron.processors.display.subject_hyperlink.DisplaySubjectHyperlink",
            "description": "\n    Shows the Subject ID with a link to the Subject Details tab.\n    "
        },
        {
            "id": 146,
            "name": "CohortDefNumberWithCategories",
            "required_args": "(oUser, oConcept, is_integer=False, *args, **kwargs)",
            "optional_args": null,
            "is_source_processor": false,
            "is_etl_processor": false,
            "is_cohort_def_processor": true,
            "is_display_processor": false,
            "is_permission_processor": false,
            "python_path": "chiron.processors.cohort_def.number_with_categories.CohortDefNumberWithCategories",
            "description": "\n    When to use:\n\n    * All values should be numbers, strings or null.\n\n    * When importing during ETL, need to set cast_to_type \"integer/string\" or \"float/string\" which\n      will store number values in Mongo as {\"num\": 5} and string values as {\"txt\": \"my value\"}\n\n    Optional arguments:\n\n    * is_integer: (default: False) set to True if the number has no decimal value.\n      NOTE: This does not round/force numbers to be integers, it only affects how histograms\n      and statistics are calculated/displayed.\n\n    "
        },
        {
            "id": 147,
            "name": "DisplayNumberWithCategories",
            "required_args": "(oUser, oConcept, **kwargs)",
            "optional_args": null,
            "is_source_processor": false,
            "is_etl_processor": false,
            "is_cohort_def_processor": false,
            "is_display_processor": true,
            "is_permission_processor": false,
            "python_path": "chiron.processors.display.number_with_categories.DisplayNumberWithCategories",
            "description": "\n    When to use:\n\n    * All values should be numbers, strings or null.\n\n    * When importing during ETL, need to set cast_to_type \"integer/string\" or \"float/string\" which\n      will store number values in Mongo as {\"num\": 5} and string values as {\"txt\": \"my value\"}\n\n    Optional arguments:\n\n    * is_integer: (default: False) set to True if the number has no decimal value.\n      NOTE: This does not round/force numbers to be integers, it only affects how histograms\n      and statistics are calculated/displayed.\n\n    "
        },
        {
            "id": 148,
            "name": "EtlName",
            "required_args": "(oConcept)",
            "optional_args": null,
            "is_source_processor": false,
            "is_etl_processor": true,
            "is_cohort_def_processor": false,
            "is_display_processor": false,
            "is_permission_processor": false,
            "python_path": "chiron_config.processors.etl_processors.EtlName",
            "description": "\n    display full name but sort by last name\n    "
        },
        {
            "id": 149,
            "name": "EtlEncCostAsString",
            "required_args": "(oConcept)",
            "optional_args": null,
            "is_source_processor": false,
            "is_etl_processor": true,
            "is_cohort_def_processor": false,
            "is_display_processor": false,
            "is_permission_processor": false,
            "python_path": "chiron_config.processors.etl_processors.EtlEncCostAsString",
            "description": "\n    Store as text but sort as string\n    "
        },
        {
            "id": 150,
            "name": "EtlLabCodeCustomSort",
            "required_args": "(oConcept)",
            "optional_args": null,
            "is_source_processor": false,
            "is_etl_processor": true,
            "is_cohort_def_processor": false,
            "is_display_processor": false,
            "is_permission_processor": false,
            "python_path": "chiron_config.processors.etl_processors.EtlLabCodeCustomSort",
            "description": "\n    Sorting by code length\n    "
        },
        {
            "id": 166,
            "name": "SourceDjangoModel",
            "required_args": "(oSource, app, model, collection_id_field='pk', subject_matching=None, subject_matching_source_id_field=None, subject_matching_destination_id_field='id', subject_matching_if_no_match='create', add_subject_ids=None, max_batch_size=10000, select_related='', prefetch_related='', filter_rules='{}')",
            "optional_args": null,
            "is_source_processor": true,
            "is_etl_processor": false,
            "is_cohort_def_processor": false,
            "is_display_processor": false,
            "is_permission_processor": false,
            "python_path": "chiron.processors.source.django.SourceDjangoModel",
            "description": "\n    A source processor that reads from a Django model.\n\n    :param app: the Django app name where the model is located\n    :type app: str\n    :param model: the Django model name\n    :type model: str\n    :param collection_id_field: The name of the field where the collection_id is located\n    :type collection_id_field: str, optional (default is primary key for model)\n    :param subject_matching_source_id_field: The name of the field where the root_collection_id\n      is located\n    :type subject_matching_source_id_field: str, optional (default is the collection_id_field\n      parameter value)\n    :param max_batch_size: The maximum number of model records that will be loaded at once\n    :type max_batch_size: int, optional (default=10,000)\n    :param select_related: A comma separated list of models to pre-select\n    :type select_related: str, optional\n    :param prefetch_related: A comma separated list of models to pre-fetch\n    :type prefetch_related: str, optional\n    :param filter_rules: A JSON string of Django filter rules to limit model records returned\n    :type filter_rules: JSON str, optional (default is all records are returned)\n    "
        },
        {
            "id": 233,
            "name": "SourceSelf",
            "required_args": "(oSource)",
            "optional_args": null,
            "is_source_processor": true,
            "is_etl_processor": false,
            "is_cohort_def_processor": false,
            "is_display_processor": false,
            "is_permission_processor": false,
            "python_path": "chiron.processors.source.self.SourceSelf",
            "description": "\n    Pulls all records from the Chiron research database itself.\n    Useful for generating calculated fields on existing records.\n    Needs to be run later in execution order, when all the input fields\n    it depends on have already been loaded.\n    "
        },
        {
            "id": 234,
            "name": "SourceSelfSubdoc",
            "required_args": "(oSource, include_related_subdocs=False)",
            "optional_args": null,
            "is_source_processor": true,
            "is_etl_processor": false,
            "is_cohort_def_processor": false,
            "is_display_processor": false,
            "is_permission_processor": false,
            "python_path": "chiron.processors.source.self_subdoc.SourceSelfSubdoc",
            "description": "\n    SourceSelfSubdoc for systems using RDBMS instead of Mongodb\n    "
        }
    ],
    "concept_handlers": [
        {
            "id": 10,
            "name": "EncCostAsStringHandler",
            "python_path": "chiron_config.processors.EncCostAsStringHandler",
            "description": null
        },
        {
            "id": 11,
            "name": "NameHandler",
            "python_path": "chiron_config.processors.NameHandler",
            "description": null
        },
        {
            "id": 12,
            "name": "LabCodeCustomSortHandler",
            "python_path": "chiron_config.processors.LabCodeCustomSortHandler",
            "description": null
        },
        {
            "id": 36,
            "name": "IntegerHandler",
            "python_path": "chiron.processors.concept_handlers.standard_concept_handlers.IntegerHandler",
            "description": "\n    Import and use an integer value.\n\n    - Works with any source that returns an array of dicts.\n    - If the input is not an integer, attempts to cast/round it to an integer\n    - Any value that can't be cast/round to an integer will be stored as null.\n\n    :param field_name: the key name of the integer field in the input dict\n    :type field_name: str\n    :param string_val_separator: if the input field can be a string with multiple values,\n      what character(s) should the string be parsed on?\n    :type string_val_separator: str, optional\n    "
        },
        {
            "id": 37,
            "name": "FloatHandler",
            "python_path": "chiron.processors.concept_handlers.standard_concept_handlers.FloatHandler",
            "description": "\n    Import and use a float value.\n\n    - Works with any source that returns an array of dicts.\n    - If the input is not a float, attempts to cast it to an float\n    - Any value that can't be cast to a float will be stored as null.\n\n    :param field_name: the key name of the float field in the input dict\n    :type field_name: str\n    :param string_val_separator: if the input field can be a string with multiple values,\n      what character(s) should the string be parsed on?\n    :type string_val_separator: str, optional\n    "
        },
        {
            "id": 38,
            "name": "IntegerWithCategoriesHandler",
            "python_path": "chiron.processors.concept_handlers.standard_concept_handlers.IntegerWithCategoriesHandler",
            "description": "\n    Import and use an integer value that can also have text categories instead of integers.\n\n    - Works with any source that returns an array of dicts.\n    - If the input is not an integer, attempts to cast/round it to an integer.\n    - Any non-empty string value that can't be cast/round to an integer will be treated as a\n      category.\n    - integers are stored internally as {\"num\": val, \"val\": val} and categories are stored\n      as {\"txt\": val, \"val\": val}\n\n    :param field_name: the key name of the integer field in the input dict\n    :type field_name: str\n    :param string_val_separator: if the input field can be a string with multiple values,\n      what character(s) should the string be parsed on?\n    :type string_val_separator: str, optional\n    "
        },
        {
            "id": 39,
            "name": "FloatWithCategoriesHandler",
            "python_path": "chiron.processors.concept_handlers.standard_concept_handlers.FloatWithCategoriesHandler",
            "description": "\n    Import and use a float value that can also have text categories instead of floats.\n\n    - Works with any source that returns an array of dicts.\n    - If the input is not a float, attempts to cast it to a float.\n    - Any non-empty string value that can't be cast to a float will be treated as a\n      category.\n    - floats are stored internally as {\"num\": val, \"val\": val} and categories are stored\n      as {\"txt\": val, \"val\": val}\n\n    :param field_name: the key name of the float field in the input dict\n    :type field_name: str\n    :param string_val_separator: if the float field can be a string with multiple values,\n      what character(s) should the string be parsed on?\n    :type string_val_separator: str, optional\n    "
        },
        {
            "id": 40,
            "name": "CategoryHandler",
            "python_path": "chiron.processors.concept_handlers.standard_concept_handlers.CategoryHandler",
            "description": "\n    Import and use a category value.\n\n    - Works with any source that returns an array of dicts.\n    - Categories are strings with a limited number of options. For fields that could have\n      many different values (ex. ID or free text fields) use TextHandler instead.\n    - Non-string values will be cast to a string.\n\n    :param field_name: the key name of the float field in the input dict\n    :type field_name: str\n    :param string_val_separator: if the input field can be a string with multiple values,\n      what character(s) should the string be parsed on?\n    :type string_val_separator: str, optional\n    "
        },
        {
            "id": 41,
            "name": "TextHandler",
            "python_path": "chiron.processors.concept_handlers.standard_concept_handlers.TextHandler",
            "description": "\n    Import and use a text value.\n\n    - Works with any source that returns an array of dicts.\n    - For text fields that are repetitive (ex. gender), consider using CategoryHandler\n      instead.\n    - Non-string values will be cast to a string.\n\n    :param field_name: the key name of the float field in the input dict\n    :type field_name: str\n    :param string_val_separator: if the input field can be a string with multiple values,\n      what character(s) should the string be parsed on?\n    :type string_val_separator: str, optional\n    "
        },
        {
            "id": 42,
            "name": "BooleanHandler",
            "python_path": "chiron.processors.concept_handlers.standard_concept_handlers.BooleanHandler",
            "description": "\n    Import and use a nullable boolean (true/false/null) value.\n\n    - Works with any source that returns an array of dicts.\n    - can handle a wide variety of string values (case insensitive)\n        - converts to True: \"true\", \"t\", \"yes\", \"y\", \"1\"\n        - converts to False: \"false\", \"f\", \"no\", \"n\", \"0\"\n        - converts to None: \"none\", \"null\", \"n/a\", \"unknown\", \"\"\n    - in any other situation, will use python casting to decide if value is truthy or falsy\n\n    :param field_name: the key name of the float field in the input dict\n    :type field_name: str\n    "
        },
        {
            "id": 43,
            "name": "DateHandler",
            "python_path": "chiron.processors.concept_handlers.standard_concept_handlers.DateHandler",
            "description": "\n    Import and use a date value.\n\n    - Works with any source that returns an array of dicts.\n    - If the input is a string, attempts to use `dateutil` library to parse to date.\n    - Any value that can't be parsed to a date will be stored as null.\n    - If the concept is flagged as PHI, users without PHI access will always see the year only.\n\n    :param field_name: the key name of the date field in the input dict\n    :type field_name: str\n    :param string_val_separator: if the input field can be a string with multiple values, what\n      character(s) should the string be parsed on?\n    :type string_val_separator: str, optional\n    "
        },
        {
            "id": 44,
            "name": "SubjectHyperlinkHandler",
            "python_path": "chiron.processors.concept_handlers.standard_concept_handlers.SubjectHyperlinkHandler",
            "description": "\n    Import an ID that uniquely identifies a subject. In some contexts, this ID can be used\n    as a hyperlink to go to subject details view.\n\n    - Works with any source that returns an array of dicts.\n    - Non-string values will be cast to a string.\n    - Behavior is similar to TextHandler.\n\n    :param field_name: the key name of the float field in the input dict\n    :type field_name: str\n    :param string_val_separator: if the input field can be a string with multiple values,\n      what character(s) should the string be parsed on?\n    :type string_val_separator: str, optional\n    "
        },
        {
            "id": 45,
            "name": "DetailedAgeHandler",
            "python_path": "chiron.processors.concept_handlers.standard_concept_handlers.DetailedAgeHandler",
            "description": "\n    Use to load age detailed age fields from a list of dicts.\n\n    - Age should either be year float (where decimal portion is a fraction of the year) or age in\n      days.\n    - If you only have the year, you should load it as a regular integer instead.\n\n    :field_name: (str) The field name for the date of birth\n    :source_format: \"age in days\" (default) or \"year float\"\n    "
        },
        {
            "id": 46,
            "name": "AutoSubjectIdHandler",
            "python_path": "chiron.processors.concept_handlers.special_concept_handlers.AutoSubjectIdHandler",
            "description": "\n    Generates a deidentified subject ID using other attributes as input.\n\n    - The value won't change even on rerun of the ETL (as long as the underlying inputs don't\n      change).\n    - Uses asymmetric encryption. Uses the SECRET_KEY in Django settings as a salt value to prevent\n      brute force attempts to re-identify.\n\n    Create a deidentified ID from an identified ID such as MRN or SSN:\n\n    - Use the identified ID as input.\n\n    Create a doubly deidentified ID (twice removed from identifying information):\n\n    - Use an already deidentified ID (such as a study ID) as input.\n\n    Create a deidentified ID when no usable ID is available:\n\n    - Use any combination of fields that you're confident will uniquely identify a patient.\n    - For example, last name and DOB would probably be sufficient on a small group of patients.\n    - Use fields with stable values. If the input values change, this ID will also change.\n\n    :input_fields: (str) A comma separated list of field name(s) to use as input\n    :length: (int, default=10) How many values in your output string (must be an even number).\n    "
        },
        {
            "id": 47,
            "name": "AutoSubcollectionIdHandler",
            "python_path": "chiron.processors.concept_handlers.special_concept_handlers.AutoSubcollectionIdHandler",
            "description": "\n    Generates a deidentified subcollection ID using other attributes as input.\n\n    - The value won't change even on rerun of the ETL (as long as the underlying inputs don't\n      change).\n    - Uses asymmetric encryption. Uses the SECRET_KEY in Django settings as a salt value to prevent\n      brute force attempts to re-identify.\n\n    Create a deidentified ID from an identified ID such as Epic Encounter CSN:\n\n    - Use the identified ID as input.\n\n    Create a deidentified ID when no usable ID is available:\n\n    - Use any combination of fields that you're confident will uniquely identify a record.\n    - For example, could use procedure_name and visit_date for a procedure record assuming that\n      nobody can have 2 of the same procedure on the same date.\n    - Use fields with stable values. If the input values change, this ID will also change.\n\n    :subcol_fields: (str) A comma sep list of field name(s) in this collection to use as input\n    :subject_fields: (str) A comma sep list of field name(s) in the subject collection to use\n      as input\n    :length: (int, default=10) How many values in your output string (must be an even number).\n    "
        },
        {
            "id": 48,
            "name": "DetailedAgeFromDatesHandler",
            "python_path": "chiron.processors.concept_handlers.special_concept_handlers.DetailedAgeFromDatesHandler",
            "description": "\n    Use with the SourceSelfSubdoc processor to generate a detailed age at event from two dates\n    (DOB and event date).\n\n    - the source for this concept must be run after the referenced concepts have been loaded\n    - the DOB must be in the subject collection and the event date must be in the subcollection\n\n    :dob_concept_id: (str) The concept permanent ID for the date of birth\n    :event_date_concept_id: (str) The concept permanent ID for the event\n    "
        },
        {
            "id": 49,
            "name": "CurrentAgeFromDobHandler",
            "python_path": "chiron.processors.concept_handlers.special_concept_handlers.CurrentAgeFromDobHandler",
            "description": "\n    Uses a DOB (and optional) DOD to create a deidentified age field.\n\n    - ages will be at the year level\n    - patients over 89 will show as \"90 and above\".\n\n    :field_name: (str) The field name for the date of birth\n    :death_date_field_name: (str, optional) The field name for the date of death\n    "
        },
        {
            "id": 50,
            "name": "SubjectMatchingToTextHandler",
            "python_path": "chiron.processors.concept_handlers.special_concept_handlers.SubjectMatchingToTextHandler",
            "description": "\n    Copies a chiron subject ID field used for matching (stored in `_ids`) into a concept.\n    Typically these fields are only used internally, so this is a way to make them available to\n    users.\n\n    - Must be used with source processor SourceSelf, and this source must be run after any sources\n      that populate the subject ID field.\n    - The value will be converted to a string.\n    "
        },
        {
            "id": 51,
            "name": "SubjectMatchingToSubjectHyperlinkHandler",
            "python_path": "chiron.processors.concept_handlers.special_concept_handlers.SubjectMatchingToSubjectHyperlinkHandler",
            "description": "\n    Copies a chiron subject ID field used for matching (stored in `_ids`) into a concept.\n    Typically these fields are only used internally, so this is a way to make them available to\n    users. In some contexts, this ID can be used as a hyperlink to go to subject details view.\n\n    - Must be used with source processor SourceSelf, and this source must be run after any sources\n      that populate the subject ID field.\n    - The value will be converted to a string.\n    "
        },
        {
            "id": 52,
            "name": "CurrentAgeHandler",
            "python_path": "chiron.processors.concept_handlers.standard_concept_handlers.CurrentAgeHandler",
            "description": "\n    Import an integer or float to get a deidentified current age.\n\n    - Will convert to an age integer if stored as float or string\n    - Any ages over 89 will be converted to a category \"90 and above\"\n    - integers are stored internally as {\"num\": val, \"val\": val} and categories are stored\n      as {\"txt\": val, \"val\": val}\n\n    :param field_name: the key name of the integer field in the input dict\n    :type field_name: str\n    :param string_val_separator: if the input field can be a string with multiple values,\n      what character(s) should the string be parsed on?\n    :type string_val_separator: str, optional\n    "
        }
    ]
}